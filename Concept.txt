#### general
storm designed by twitter then become apache open source.
implemented by clojure language.

#### component
Nimbus job tracker or master. Nimbus is Thrift service.
topologies is graph computing like job in spark
worker supervisor deamon

Stream unbound sequences of tuples
spouts source of stream. both reliable and unreliable source. spout can emit more than a stream.
bolts consumer of stream

task is one execution thread.

#### Grouping
how stream is partitioned among bolt's tasks.
1. shuffle grouping: random partition
2. Fields grouping: partition according to one field. then each bolt deal with tuple of same field value
3. partial key grouping: field grouping and load balance
4. all grouping: replicated to all bolts
5. global grouping: stream go to single bolt
6 none grouping: currently equal to shuffle one.
7 direct grouping: producer decide which bolt deal with stream
8 local or grouping: if bolt has more tasks in same worker process, tuple just shuffle in-process tasks.



#### Trident
state to save data in disc, hdfs or other persistence device.

http://blog.chinaunix.net/uid-26253719-id-4063679.html
http://blog.csdn.net/derekjiang/article/details/9126185


#### DRPC
distributed remote process call.
in one topology, you can define DRPC stream. then DRPC can run on the topology.
unlike spout and bolt, DRPC need be called explicitly.
so it is very like a remote call, after call, the result will be returned to console.
maybe

#### Implementation
the message between spout and bolt is via tcp, ZeroMQ system.





#### ACK mechanism  http://www.tuicool.com/articles/vErmIb
message process tree: any message from spout and then all following process can be
viewed as a process tree.
In storm, we have ack mechanism to trace if all nodes in the message process tree deal
with message and tuple successfully.

the implementation details of ack:
there is an ack bolt to trace each tuple 's tuple tree.
by xor all tuple id generated and tuple id dealt, then judge if all done (tricky and smart method)





